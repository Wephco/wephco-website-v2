// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String     @unique
  password   String
  role       Role       @default(AGENT)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  properties  Property[]  
  sessions Session[]

  @@map("users") // optional: maps the model to a MongoDB collection name
}

enum Role {
  AGENT
  SUPPORT
  ADMIN
  SUPERADMIN
}

model Property {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  images      String[] // Prisma supports arrays in MongoDB
  price       Float
  country     String
  city        String
  address     String
  agent       User?    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId     String?   @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("properties") // optional, aligns with MongoDB collection name
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.ObjectId
  sessionToken String   @unique
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions") // optional, aligns with MongoDB collection name
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@map("verification_tokens") // optional, aligns with MongoDB collection name
}

model Contact {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String
  phoneNumber String
  message     String
  status      Boolean
  createdAt   DateTime @default(now())

  @@map("contacts") // optional, aligns with MongoDB collection name
}

model SellEnquiry {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String
  phone       String
  status      Boolean
  address     String
  timeline    String
  createdAt   DateTime @default(now())
  

  @@map("sell_enquiry") // optional, aligns with MongoDB collection name
}
